// Code generated by MockGen. DO NOT EDIT.
// Source: F:\git_push\webook-open\internal\web\encryption\type.go

// Package jwtmocks is a generated GoMock package.
package jwtmocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockHandle is a mock of Handle interface.
type MockHandle struct {
	ctrl     *gomock.Controller
	recorder *MockHandleMockRecorder
}

// MockHandleMockRecorder is the mock recorder for MockHandle.
type MockHandleMockRecorder struct {
	mock *MockHandle
}

// NewMockHandle creates a new mock instance.
func NewMockHandle(ctrl *gomock.Controller) *MockHandle {
	mock := &MockHandle{ctrl: ctrl}
	mock.recorder = &MockHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandle) EXPECT() *MockHandleMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockHandle) Decrypt(tokenStr, secretCode string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", tokenStr, secretCode)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockHandleMockRecorder) Decrypt(tokenStr, secretCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockHandle)(nil).Decrypt), tokenStr, secretCode)
}

// Encryption mocks base method.
func (m *MockHandle) Encryption(arg0 map[string]string, arg1 string, arg2 time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encryption", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encryption indicates an expected call of Encryption.
func (mr *MockHandleMockRecorder) Encryption(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encryption", reflect.TypeOf((*MockHandle)(nil).Encryption), arg0, arg1, arg2)
}
